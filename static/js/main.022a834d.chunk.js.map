{"version":3,"sources":["Styles/recipe.module.css","CustomLink.jsx","Recipe.js","CustomInput.jsx","collection.js","App.js","serviceWorker.js","index.js","Styles/preview.module.css"],"names":["module","exports","CustomLink","text","href","Recipe","src","title","ingredient","url","preview_container","Styles","items","item_list","className","alt","map","item","i","key","CustomInput","type","name","id","onChange","value","placeholder","autocomplete","autoComplete","SelectOption","App","useState","recipes","setRecipes","foodSearch","setFooSearch","selectInput","setSelecOptions","previewLimit","setPreviewLimit","getRecipes","a","from","Number","to","fetch","response","json","data","hits","search_bar","search_form","search_button","select","onSubmit","e","preventDefault","target","split","values","recipe","image","label","ingredientLines","calories","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.022a834d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"recipe_App__3A1-8\",\"search_form\":\"recipe_search_form__Z9CtV\",\"select\":\"recipe_select__3rInL\",\"search_button\":\"recipe_search_button__1yY_T\",\"splash\":\"recipe_splash__8eMoF\"};","import React from \"react\";\n\nfunction CustomLink({ text, href }) {\n  return (\n    <div>\n      <a href={href ? href : null}>{text}</a>\n    </div>\n  );\n}\n\nexport default CustomLink;\n","import React from \"react\";\nimport CustomLink from \"./CustomLink\";\nimport Styles from \"./Styles/preview.module.css\";\nconst Recipe = ({ src, title, ingredient, url }) => {\n  const { preview_container, items, item_list } = Styles;\n  return (\n    <div className={preview_container}>\n      <div className={items}>\n        <CustomLink href={url} text={<img src={src} alt={\"food view\"} />} />\n        <h1>{title}</h1>\n      </div>\n      <div className={item_list}>\n        <h2>Ingredients</h2>\n        <ul>\n          {ingredient && ingredient.map((item, i) => <li key={i}>{item}</li>)}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React from \"react\";\n\nconst CustomInput = ({\n  type,\n  name,\n  id,\n  onChange,\n  value,\n  placeholder,\n  autocomplete\n}) => {\n  return (\n    <div>\n      <input\n        type={type ? type : \"\"}\n        name={name ? name : \"\"}\n        id={id ? id : \"\"}\n        value={value ? value : \"\"}\n        onChange={onChange ? onChange : null}\n        placeholder={placeholder ? placeholder : null}\n        autoComplete={autocomplete ? autocomplete : null}\n      />\n    </div>\n  );\n};\nexport default CustomInput;\n","export const SelectOption = [\"0-10\", \"11-20\", \" 21-30\", \" 31-40\", \" 41-50\"];\n","import React, { useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport CustomInput from \"./CustomInput\";\nimport Styles from \"./Styles/recipe.module.css\";\nimport { SelectOption } from \"./collection\";\nconst App = () => {\n  const APP_ID = \"6d6a83db\";\n  const APP_KEY = \"2301e231e5cf4dc8ba58fb8966ba46d3\";\n  const [recipes, setRecipes] = useState([]);\n  const [foodSearch, setFooSearch] = useState(\"\");\n  const [selectInput, setSelecOptions] = useState(\"\");\n  const [previewLimit, setPreviewLimit] = useState([\"0\", \"10\"]);\n\n  const handleChange = ({ target }) => {\n    setFooSearch(target.value);\n  };\n  const handleSelectChange = ({ target }) => {\n    setSelecOptions(target.value);\n    let split = target.value.split(\"-\");\n    setPreviewLimit(split);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    getRecipes();\n  };\n  const getRecipes = async () => {\n    let from = Number(previewLimit[0]);\n    let to = Number(previewLimit[1]);\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${foodSearch}&app_id=${APP_ID}&app_key=${APP_KEY}&from=${from}&to=${to}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const { search_bar, search_form, App, search_button, select } = Styles;\n  return (\n    <div className={App}>\n      <form className={search_form} onSubmit={handleSubmit}>\n        <CustomInput\n          className={search_bar}\n          type={\"text\"}\n          name={\"foodSearch\"}\n          value={foodSearch}\n          onChange={handleChange}\n          placeholder={\"eg food name , fruits name\"}\n          autocomplete={\"off\"}\n        />\n        <select\n          name=\"select\"\n          value={selectInput}\n          onChange={handleSelectChange}\n          className={select}\n        >\n          {SelectOption &&\n            SelectOption.map((values, i) => <option key={i}>{values}</option>)}\n        </select>\n\n        <div>\n          <button className={search_button} type=\"submit\">\n            searchFoods\n          </button>\n        </div>\n      </form>\n      {recipes.map(({ recipe }) => {\n        return (\n          <Recipe\n            key={recipe.image}\n            title={recipe.label}\n            src={recipe.image}\n            ingredient={recipe.ingredientLines}\n            calories={recipe.calories}\n            url={recipe.url}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview_container\":\"preview_preview_container__3KxJz\",\"items\":\"preview_items__1no-P\",\"item_list\":\"preview_item_list__2zd8d\",\"blink\":\"preview_blink__2P6u3\"};"],"sourceRoot":""}